<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<style>
canvas {
    border: 1px solid #000000;
    background-color: #abc7f0;
}

.blur {
    filter: blur(5px);
    pointer-events: none;
}

#restartButton, #gameStartButton, #gameInstructionsButton, #startGameAfterInstructions {
    display: none;
    position: absolute;
    top: 10%;
    left: 10%;
    transform: translate(-50%, -50%);
    padding: 15px;
    font-size: 18px;
    background-color: #002fff;
    color: white;
    cursor: pointer;
    border: none;
    border-radius: 5px;
}

#restartButton:hover, #gameStartButton:hover, #gameInstructionsButton:hover, #startGameAfterInstructions:hover {
    background-color: #7096ff;
}

#gameInstructions {
    display: none;
    position: absolute;
    top: 10%;
    left: 10%;
    transform: translate(-50%, -50%);
    padding: 15px;
    font-size: 16px;
    background-color: #d7e1ff;
    color: #333;
    border: 1px solid #ccc;
    border-radius: 5px;
}

</style>
</head>
<body onload="showGameStartButton()">

<div id="gameStartButton" onclick="startGame()">게임 시작</div>
<div id="gameInstructionsButton" onclick="showInstructions()">게임 방법</div>

<div id="gameInstructions">
    <p>방향키를 이용해 움직입니다.</p>
    <p>다가오는 장애물을 피해</p>
    <p>높은 점수를 받아보세요!</p>
    <div id="startGameAfterInstructions" onclick="startGame()" style="top: 200px; left: 110px;">게임 시작</div>
</div>

<button id="restartButton" onclick="restartGame()">Restart</button>

<script>

var myGamePiece;
var myObstacles = [];
var myScore;
var restartButton;

function startGame() {
    document.getElementById("gameStartButton").style.display = "none";
    document.getElementById("gameInstructionsButton").style.display = "none";
    document.getElementById("gameInstructions").style.display = "none";
    document.getElementById("startGameAfterInstructions").style.display = "none";

    myGamePiece = new component(30, 30, "white", 10, 120);
    myScore = new component("30px", "Consolas", "black", 280, 40, "text");
    restartButton = document.getElementById("restartButton");
    restartButton.style.display = "none";
    document.body.appendChild(restartButton);
    myGameArea.start();
}

var myGameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = 480;
        this.canvas.height = 270;
        this.context = this.canvas.getContext("2d");
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.frameNo = 0;
        this.interval = setInterval(updateGameArea, 20);
        this.key = false;
        window.addEventListener('keydown', function (e) {
            myGameArea.key = e.keyCode;
        })
        window.addEventListener('keyup', function (e) {
            myGameArea.key = false;
        })
    }, 
    clear : function(){
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    },
    stop : function() {
        clearInterval(this.interval);
        this.context.fillStyle = "rgba(255, 255, 255, 0.5)";
        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
        restartButton.style.display = "block";
        restartButton.style.top = this.canvas.height / 2 + "px";
        restartButton.style.left = this.canvas.width / 2 - restartButton.offsetWidth / 2 + "px";
    }
}

function component(width, height, color, x, y, type) {
    this.type = type;
    this.width = width;
    this.height = height;
    this.speedX = 0;
    this.speedY = 0;    
    this.x = x;
    this.y = y;    
    this.update = function() {
        ctx = myGameArea.context;
        if (this.type == "text") {
            ctx.font = this.width + " " + this.height;
            ctx.fillStyle = color;
            ctx.fillText(this.text, this.x, this.y);
        } else {
            ctx.fillStyle = color;
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
    }
    this.newPos = function() {
        this.x += this.speedX;
        this.y += this.speedY;        
    }
    this.crashWith = function(otherobj) {
        var myleft = this.x;
        var myright = this.x + (this.width);
        var mytop = this.y;
        var mybottom = this.y + (this.height);
        var otherleft = otherobj.x;
        var otherright = otherobj.x + (otherobj.width);
        var othertop = otherobj.y;
        var otherbottom = otherobj.y + (otherobj.height);
        var crash = true;
        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
            crash = false;
        }
        return crash;
    }
}

function updateGameArea() {
    var x, height, gap, minHeight, maxHeight, minGap, maxGap;
    for (i = 0; i < myObstacles.length; i += 1) {
        if (myGamePiece.crashWith(myObstacles[i])) {
            myGameArea.stop();
            return;
        } 
    }
    myGameArea.clear();
    myGameArea.frameNo += 1;
    if (myGameArea.frameNo == 1 || everyinterval(150)) {
        x = myGameArea.canvas.width;
        minHeight = 20;
        maxHeight = 200;
        height = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);
        minGap = 50;
        maxGap = 200;
        gap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);
        myObstacles.push(new component(10, height, "blue", x, 0));
        myObstacles.push(new component(10, x - height - gap, "blue", x, height + gap));
    }
    for (i = 0; i < myObstacles.length; i += 1) {
        myObstacles[i].speedX = -1;
        myObstacles[i].newPos();
        myObstacles[i].update();
    }
    myScore.text="SCORE: " + myGameArea.frameNo;
    myScore.update();
    
    // 키 이벤트 처리
    myGamePiece.speedX = 0;
    myGamePiece.speedY = 0;    
    if (myGameArea.key && myGameArea.key == 37) {myGamePiece.speedX = -1; }
    if (myGameArea.key && myGameArea.key == 39) {myGamePiece.speedX = 1; }
    if (myGameArea.key && myGameArea.key == 38) {myGamePiece.speedY = -1; }
    if (myGameArea.key && myGameArea.key == 40) {myGamePiece.speedY = 1; }
    
    myGamePiece.newPos();    
    myGamePiece.update();
}

function everyinterval(n) {
    if ((myGameArea.frameNo / n) % 1 == 0) {return true;}
    return false;
}

function restartGame() {
    restartButton.style.display = "none";
    myObstacles = [];
    myGameArea.frameNo = 0;
    myGameArea.start();
}

function showGameStartButton() {
    document.getElementById("gameStartButton").style.display = "block";
    document.getElementById("gameInstructionsButton").style.display = "block";
    document.getElementById("gameInstructions").style.display = "none";
    document.getElementById("startGameAfterInstructions").style.display = "none";
}

function showInstructions() {
    document.getElementById("gameStartButton").style.display = "none";
    document.getElementById("gameInstructionsButton").style.display = "none";
    document.getElementById("gameInstructions").style.display = "block";
    document.getElementById("startGameAfterInstructions").style.display = "block";
}

</script>
</body>
</html>
